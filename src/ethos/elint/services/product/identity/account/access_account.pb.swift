// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/services/product/identity/account/access_account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Step One: Validate Account Created
struct Elint_Services_Product_Identity_Account_ValidateAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Service Request Properties
  var accountMobileNumber: String = String()

  /// Meta Properties
  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return self._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {self._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Step One: Validate Account Created Response
struct Elint_Services_Product_Identity_Account_ValidateAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Auth Properties
  var accountAccessAuthDetails: Elint_Services_Product_Identity_Account_AccountAccessAuthDetails {
    get {return _storage._accountAccessAuthDetails ?? Elint_Services_Product_Identity_Account_AccountAccessAuthDetails()}
    set {_uniqueStorage()._accountAccessAuthDetails = newValue}
  }
  /// Returns true if `accountAccessAuthDetails` has been explicitly set.
  var hasAccountAccessAuthDetails: Bool {return _storage._accountAccessAuthDetails != nil}
  /// Clears the value of `accountAccessAuthDetails`. Subsequent reads from it will return its default value.
  mutating func clearAccountAccessAuthDetails() {_uniqueStorage()._accountAccessAuthDetails = nil}

  /// Service Response Properties
  var accountExists: Bool {
    get {return _storage._accountExists}
    set {_uniqueStorage()._accountExists = newValue}
  }

  var verificationCodeTokenDetails: Elint_Entity_TemporaryTokenDetails {
    get {return _storage._verificationCodeTokenDetails ?? Elint_Entity_TemporaryTokenDetails()}
    set {_uniqueStorage()._verificationCodeTokenDetails = newValue}
  }
  /// Returns true if `verificationCodeTokenDetails` has been explicitly set.
  var hasVerificationCodeTokenDetails: Bool {return _storage._verificationCodeTokenDetails != nil}
  /// Clears the value of `verificationCodeTokenDetails`. Subsequent reads from it will return its default value.
  mutating func clearVerificationCodeTokenDetails() {_uniqueStorage()._verificationCodeTokenDetails = nil}

  var codeSentAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._codeSentAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._codeSentAt = newValue}
  }
  /// Returns true if `codeSentAt` has been explicitly set.
  var hasCodeSentAt: Bool {return _storage._codeSentAt != nil}
  /// Clears the value of `codeSentAt`. Subsequent reads from it will return its default value.
  mutating func clearCodeSentAt() {_uniqueStorage()._codeSentAt = nil}

  /// Meta Properties
  var validateAccountDone: Bool {
    get {return _storage._validateAccountDone}
    set {_uniqueStorage()._validateAccountDone = newValue}
  }

  var validateAccountMessage: String {
    get {return _storage._validateAccountMessage}
    set {_uniqueStorage()._validateAccountMessage = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Step Three: Verify with OTP Request Properties (With OTP)
struct Elint_Services_Product_Identity_Account_VerifyAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Auth Properties
  var accountAccessAuthDetails: Elint_Services_Product_Identity_Account_AccountAccessAuthDetails {
    get {return _storage._accountAccessAuthDetails ?? Elint_Services_Product_Identity_Account_AccountAccessAuthDetails()}
    set {_uniqueStorage()._accountAccessAuthDetails = newValue}
  }
  /// Returns true if `accountAccessAuthDetails` has been explicitly set.
  var hasAccountAccessAuthDetails: Bool {return _storage._accountAccessAuthDetails != nil}
  /// Clears the value of `accountAccessAuthDetails`. Subsequent reads from it will return its default value.
  mutating func clearAccountAccessAuthDetails() {_uniqueStorage()._accountAccessAuthDetails = nil}

  /// Service Request Properties
  var resendCode: Bool {
    get {return _storage._resendCode}
    set {_uniqueStorage()._resendCode = newValue}
  }

  var verificationCodeTokenDetails: Elint_Entity_TemporaryTokenDetails {
    get {return _storage._verificationCodeTokenDetails ?? Elint_Entity_TemporaryTokenDetails()}
    set {_uniqueStorage()._verificationCodeTokenDetails = newValue}
  }
  /// Returns true if `verificationCodeTokenDetails` has been explicitly set.
  var hasVerificationCodeTokenDetails: Bool {return _storage._verificationCodeTokenDetails != nil}
  /// Clears the value of `verificationCodeTokenDetails`. Subsequent reads from it will return its default value.
  mutating func clearVerificationCodeTokenDetails() {_uniqueStorage()._verificationCodeTokenDetails = nil}

  var verificationCode: String {
    get {return _storage._verificationCode}
    set {_uniqueStorage()._verificationCode = newValue}
  }

  /// Meta Properties
  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return _storage._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {_uniqueStorage()._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Step Three: Verify with OTP Response Properties
struct Elint_Services_Product_Identity_Account_VerifyAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Service Properties
  var accountServiceAccessAuthDetails: Elint_Services_Product_Identity_Account_AccountServicesAccessAuthDetails {
    get {return _accountServiceAccessAuthDetails ?? Elint_Services_Product_Identity_Account_AccountServicesAccessAuthDetails()}
    set {_accountServiceAccessAuthDetails = newValue}
  }
  /// Returns true if `accountServiceAccessAuthDetails` has been explicitly set.
  var hasAccountServiceAccessAuthDetails: Bool {return self._accountServiceAccessAuthDetails != nil}
  /// Clears the value of `accountServiceAccessAuthDetails`. Subsequent reads from it will return its default value.
  mutating func clearAccountServiceAccessAuthDetails() {self._accountServiceAccessAuthDetails = nil}

  /// Meta Properties
  var verificationDone: Bool = false

  var verificationMessage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _accountServiceAccessAuthDetails: Elint_Services_Product_Identity_Account_AccountServicesAccessAuthDetails? = nil
}

struct Elint_Services_Product_Identity_Account_AccountAccessAuthDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountMobileNumber: String = String()

  var accountAccessAuthSessionTokenDetails: Elint_Entity_PersistentSessionTokenDetails {
    get {return _accountAccessAuthSessionTokenDetails ?? Elint_Entity_PersistentSessionTokenDetails()}
    set {_accountAccessAuthSessionTokenDetails = newValue}
  }
  /// Returns true if `accountAccessAuthSessionTokenDetails` has been explicitly set.
  var hasAccountAccessAuthSessionTokenDetails: Bool {return self._accountAccessAuthSessionTokenDetails != nil}
  /// Clears the value of `accountAccessAuthSessionTokenDetails`. Subsequent reads from it will return its default value.
  mutating func clearAccountAccessAuthSessionTokenDetails() {self._accountAccessAuthSessionTokenDetails = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _accountAccessAuthSessionTokenDetails: Elint_Entity_PersistentSessionTokenDetails? = nil
}

struct Elint_Services_Product_Identity_Account_AccountServicesAccessAuthDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Auth Properties
  var account: Elint_Entity_Account {
    get {return _storage._account ?? Elint_Entity_Account()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  mutating func clearAccount() {_uniqueStorage()._account = nil}

  /// What is the session token wrt this request?
  var accountAccessSessionTokenDetails: Elint_Entity_PersistentSessionTokenDetails {
    get {return _storage._accountAccessSessionTokenDetails ?? Elint_Entity_PersistentSessionTokenDetails()}
    set {_uniqueStorage()._accountAccessSessionTokenDetails = newValue}
  }
  /// Returns true if `accountAccessSessionTokenDetails` has been explicitly set.
  var hasAccountAccessSessionTokenDetails: Bool {return _storage._accountAccessSessionTokenDetails != nil}
  /// Clears the value of `accountAccessSessionTokenDetails`. Subsequent reads from it will return its default value.
  mutating func clearAccountAccessSessionTokenDetails() {_uniqueStorage()._accountAccessSessionTokenDetails = nil}

  /// Meta Properties
  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return _storage._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {_uniqueStorage()._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.services.product.identity.account"

extension Elint_Services_Product_Identity_Account_ValidateAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidateAccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_mobile_number"),
    2: .standard(proto: "requested_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountMobileNumber) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountMobileNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.accountMobileNumber, fieldNumber: 1)
    }
    if let v = self._requestedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_Account_ValidateAccountRequest, rhs: Elint_Services_Product_Identity_Account_ValidateAccountRequest) -> Bool {
    if lhs.accountMobileNumber != rhs.accountMobileNumber {return false}
    if lhs._requestedAt != rhs._requestedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Identity_Account_ValidateAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidateAccountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_access_auth_details"),
    2: .standard(proto: "account_exists"),
    3: .standard(proto: "verification_code_token_details"),
    4: .standard(proto: "code_sent_at"),
    5: .standard(proto: "validate_account_done"),
    6: .standard(proto: "validate_account_message"),
  ]

  fileprivate class _StorageClass {
    var _accountAccessAuthDetails: Elint_Services_Product_Identity_Account_AccountAccessAuthDetails? = nil
    var _accountExists: Bool = false
    var _verificationCodeTokenDetails: Elint_Entity_TemporaryTokenDetails? = nil
    var _codeSentAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _validateAccountDone: Bool = false
    var _validateAccountMessage: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountAccessAuthDetails = source._accountAccessAuthDetails
      _accountExists = source._accountExists
      _verificationCodeTokenDetails = source._verificationCodeTokenDetails
      _codeSentAt = source._codeSentAt
      _validateAccountDone = source._validateAccountDone
      _validateAccountMessage = source._validateAccountMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._accountAccessAuthDetails) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._accountExists) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._verificationCodeTokenDetails) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._codeSentAt) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._validateAccountDone) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._validateAccountMessage) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountAccessAuthDetails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._accountExists != false {
        try visitor.visitSingularBoolField(value: _storage._accountExists, fieldNumber: 2)
      }
      if let v = _storage._verificationCodeTokenDetails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._codeSentAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._validateAccountDone != false {
        try visitor.visitSingularBoolField(value: _storage._validateAccountDone, fieldNumber: 5)
      }
      if !_storage._validateAccountMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validateAccountMessage, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_Account_ValidateAccountResponse, rhs: Elint_Services_Product_Identity_Account_ValidateAccountResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountAccessAuthDetails != rhs_storage._accountAccessAuthDetails {return false}
        if _storage._accountExists != rhs_storage._accountExists {return false}
        if _storage._verificationCodeTokenDetails != rhs_storage._verificationCodeTokenDetails {return false}
        if _storage._codeSentAt != rhs_storage._codeSentAt {return false}
        if _storage._validateAccountDone != rhs_storage._validateAccountDone {return false}
        if _storage._validateAccountMessage != rhs_storage._validateAccountMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Identity_Account_VerifyAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyAccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_access_auth_details"),
    2: .standard(proto: "resend_code"),
    3: .standard(proto: "verification_code_token_details"),
    4: .standard(proto: "verification_code"),
    5: .standard(proto: "requested_at"),
  ]

  fileprivate class _StorageClass {
    var _accountAccessAuthDetails: Elint_Services_Product_Identity_Account_AccountAccessAuthDetails? = nil
    var _resendCode: Bool = false
    var _verificationCodeTokenDetails: Elint_Entity_TemporaryTokenDetails? = nil
    var _verificationCode: String = String()
    var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountAccessAuthDetails = source._accountAccessAuthDetails
      _resendCode = source._resendCode
      _verificationCodeTokenDetails = source._verificationCodeTokenDetails
      _verificationCode = source._verificationCode
      _requestedAt = source._requestedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._accountAccessAuthDetails) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._resendCode) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._verificationCodeTokenDetails) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._verificationCode) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._requestedAt) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountAccessAuthDetails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._resendCode != false {
        try visitor.visitSingularBoolField(value: _storage._resendCode, fieldNumber: 2)
      }
      if let v = _storage._verificationCodeTokenDetails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._verificationCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._verificationCode, fieldNumber: 4)
      }
      if let v = _storage._requestedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_Account_VerifyAccountRequest, rhs: Elint_Services_Product_Identity_Account_VerifyAccountRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountAccessAuthDetails != rhs_storage._accountAccessAuthDetails {return false}
        if _storage._resendCode != rhs_storage._resendCode {return false}
        if _storage._verificationCodeTokenDetails != rhs_storage._verificationCodeTokenDetails {return false}
        if _storage._verificationCode != rhs_storage._verificationCode {return false}
        if _storage._requestedAt != rhs_storage._requestedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Identity_Account_VerifyAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyAccountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_service_access_auth_details"),
    2: .standard(proto: "verification_done"),
    3: .standard(proto: "verification_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._accountServiceAccessAuthDetails) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.verificationDone) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.verificationMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._accountServiceAccessAuthDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.verificationDone != false {
      try visitor.visitSingularBoolField(value: self.verificationDone, fieldNumber: 2)
    }
    if !self.verificationMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationMessage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_Account_VerifyAccountResponse, rhs: Elint_Services_Product_Identity_Account_VerifyAccountResponse) -> Bool {
    if lhs._accountServiceAccessAuthDetails != rhs._accountServiceAccessAuthDetails {return false}
    if lhs.verificationDone != rhs.verificationDone {return false}
    if lhs.verificationMessage != rhs.verificationMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Identity_Account_AccountAccessAuthDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountAccessAuthDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_mobile_number"),
    2: .standard(proto: "account_access_auth_session_token_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountMobileNumber) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._accountAccessAuthSessionTokenDetails) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountMobileNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.accountMobileNumber, fieldNumber: 1)
    }
    if let v = self._accountAccessAuthSessionTokenDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_Account_AccountAccessAuthDetails, rhs: Elint_Services_Product_Identity_Account_AccountAccessAuthDetails) -> Bool {
    if lhs.accountMobileNumber != rhs.accountMobileNumber {return false}
    if lhs._accountAccessAuthSessionTokenDetails != rhs._accountAccessAuthSessionTokenDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Identity_Account_AccountServicesAccessAuthDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountServicesAccessAuthDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .standard(proto: "account_access_session_token_details"),
    3: .standard(proto: "requested_at"),
  ]

  fileprivate class _StorageClass {
    var _account: Elint_Entity_Account? = nil
    var _accountAccessSessionTokenDetails: Elint_Entity_PersistentSessionTokenDetails? = nil
    var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _accountAccessSessionTokenDetails = source._accountAccessSessionTokenDetails
      _requestedAt = source._requestedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._account) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._accountAccessSessionTokenDetails) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._requestedAt) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._accountAccessSessionTokenDetails {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._requestedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_Account_AccountServicesAccessAuthDetails, rhs: Elint_Services_Product_Identity_Account_AccountServicesAccessAuthDetails) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._accountAccessSessionTokenDetails != rhs_storage._accountAccessSessionTokenDetails {return false}
        if _storage._requestedAt != rhs_storage._requestedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
