// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/services/product/identity/account/space_gateway_account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Elint_Services_Product_Identity_SpaceKind: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case knowledge // = 0
  case product // = 1
  case service // = 2
  case thing // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .knowledge
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .knowledge
    case 1: self = .product
    case 2: self = .service
    case 3: self = .thing
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .knowledge: return 0
    case .product: return 1
    case .service: return 2
    case .thing: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Elint_Services_Product_Identity_SpaceKind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Elint_Services_Product_Identity_SpaceKind] = [
    .knowledge,
    .product,
    .service,
    .thing,
  ]
}

#endif  // swift(>=4.2)

struct Elint_Services_Product_Identity_AccountSpaceGatewaySessionTokenDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spaceKind: Elint_Services_Product_Identity_SpaceKind = .knowledge

  var spaceGatewaySessionTokenDetails: Elint_Entity_PersistentSessionTokenDetails {
    get {return _spaceGatewaySessionTokenDetails ?? Elint_Entity_PersistentSessionTokenDetails()}
    set {_spaceGatewaySessionTokenDetails = newValue}
  }
  /// Returns true if `spaceGatewaySessionTokenDetails` has been explicitly set.
  var hasSpaceGatewaySessionTokenDetails: Bool {return self._spaceGatewaySessionTokenDetails != nil}
  /// Clears the value of `spaceGatewaySessionTokenDetails`. Subsequent reads from it will return its default value.
  mutating func clearSpaceGatewaySessionTokenDetails() {self._spaceGatewaySessionTokenDetails = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spaceGatewaySessionTokenDetails: Elint_Entity_PersistentSessionTokenDetails? = nil
}

struct Elint_Services_Product_Identity_SpaceGatewayAccessRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityAccessSessionTokenDetails: Elint_Entity_PersistentSessionTokenDetails {
    get {return _identityAccessSessionTokenDetails ?? Elint_Entity_PersistentSessionTokenDetails()}
    set {_identityAccessSessionTokenDetails = newValue}
  }
  /// Returns true if `identityAccessSessionTokenDetails` has been explicitly set.
  var hasIdentityAccessSessionTokenDetails: Bool {return self._identityAccessSessionTokenDetails != nil}
  /// Clears the value of `identityAccessSessionTokenDetails`. Subsequent reads from it will return its default value.
  mutating func clearIdentityAccessSessionTokenDetails() {self._identityAccessSessionTokenDetails = nil}

  var spaceKind: Elint_Services_Product_Identity_SpaceKind = .knowledge

  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return self._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {self._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _identityAccessSessionTokenDetails: Elint_Entity_PersistentSessionTokenDetails? = nil
  fileprivate var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Services_Product_Identity_SpaceGatewayAccessResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountSpaceGatewaySessionTokenDetails: Elint_Services_Product_Identity_AccountSpaceGatewaySessionTokenDetails {
    get {return _accountSpaceGatewaySessionTokenDetails ?? Elint_Services_Product_Identity_AccountSpaceGatewaySessionTokenDetails()}
    set {_accountSpaceGatewaySessionTokenDetails = newValue}
  }
  /// Returns true if `accountSpaceGatewaySessionTokenDetails` has been explicitly set.
  var hasAccountSpaceGatewaySessionTokenDetails: Bool {return self._accountSpaceGatewaySessionTokenDetails != nil}
  /// Clears the value of `accountSpaceGatewaySessionTokenDetails`. Subsequent reads from it will return its default value.
  mutating func clearAccountSpaceGatewaySessionTokenDetails() {self._accountSpaceGatewaySessionTokenDetails = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _accountSpaceGatewaySessionTokenDetails: Elint_Services_Product_Identity_AccountSpaceGatewaySessionTokenDetails? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.services.product.identity"

extension Elint_Services_Product_Identity_SpaceKind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KNOWLEDGE"),
    1: .same(proto: "PRODUCT"),
    2: .same(proto: "SERVICE"),
    3: .same(proto: "THING"),
  ]
}

extension Elint_Services_Product_Identity_AccountSpaceGatewaySessionTokenDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountSpaceGatewaySessionTokenDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "space_kind"),
    2: .standard(proto: "space_gateway_session_token_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.spaceKind) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._spaceGatewaySessionTokenDetails) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.spaceKind != .knowledge {
      try visitor.visitSingularEnumField(value: self.spaceKind, fieldNumber: 1)
    }
    if let v = self._spaceGatewaySessionTokenDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_AccountSpaceGatewaySessionTokenDetails, rhs: Elint_Services_Product_Identity_AccountSpaceGatewaySessionTokenDetails) -> Bool {
    if lhs.spaceKind != rhs.spaceKind {return false}
    if lhs._spaceGatewaySessionTokenDetails != rhs._spaceGatewaySessionTokenDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Identity_SpaceGatewayAccessRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpaceGatewayAccessRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_access_session_token_details"),
    2: .standard(proto: "space_kind"),
    3: .standard(proto: "requested_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._identityAccessSessionTokenDetails) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.spaceKind) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._requestedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identityAccessSessionTokenDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.spaceKind != .knowledge {
      try visitor.visitSingularEnumField(value: self.spaceKind, fieldNumber: 2)
    }
    if let v = self._requestedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_SpaceGatewayAccessRequest, rhs: Elint_Services_Product_Identity_SpaceGatewayAccessRequest) -> Bool {
    if lhs._identityAccessSessionTokenDetails != rhs._identityAccessSessionTokenDetails {return false}
    if lhs.spaceKind != rhs.spaceKind {return false}
    if lhs._requestedAt != rhs._requestedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Identity_SpaceGatewayAccessResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpaceGatewayAccessResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_space_gateway_session_token_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._accountSpaceGatewaySessionTokenDetails) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._accountSpaceGatewaySessionTokenDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Identity_SpaceGatewayAccessResponse, rhs: Elint_Services_Product_Identity_SpaceGatewayAccessResponse) -> Bool {
    if lhs._accountSpaceGatewaySessionTokenDetails != rhs._accountSpaceGatewaySessionTokenDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
