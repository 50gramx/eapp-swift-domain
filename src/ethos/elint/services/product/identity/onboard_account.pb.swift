// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/services/product/identity/onboard_account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ClaimAccountRequest represents new Claim of Account 
struct Elint_Services_Product_ClaimAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// What is the email address?
  var accountEmailID: String = String()

  /// When was it requested?
  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return self._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {self._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// ClaimAccountResponse returns about accountability of Claim 
struct Elint_Services_Product_ClaimAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountEmailID: String = String()

  var accountClaimable: Bool = false

  var verificationCodeToken: String = String()

  var onboardSessionToken: String = String()

  var codeSentAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _codeSentAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_codeSentAt = newValue}
  }
  /// Returns true if `codeSentAt` has been explicitly set.
  var hasCodeSentAt: Bool {return self._codeSentAt != nil}
  /// Clears the value of `codeSentAt`. Subsequent reads from it will return its default value.
  mutating func clearCodeSentAt() {self._codeSentAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _codeSentAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Services_Product_ReRequestCodeClaimingAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountEmailID: String = String()

  var generatedVerificationCodeToken: String = String()

  var onboardSessionToken: String = String()

  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return self._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {self._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Services_Product_ReRequestCodeClaimingAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountEmailID: String = String()

  var verificationCodeToken: String = String()

  var onboardSessionToken: String = String()

  var codeSentAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _codeSentAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_codeSentAt = newValue}
  }
  /// Returns true if `codeSentAt` has been explicitly set.
  var hasCodeSentAt: Bool {return self._codeSentAt != nil}
  /// Clears the value of `codeSentAt`. Subsequent reads from it will return its default value.
  mutating func clearCodeSentAt() {self._codeSentAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _codeSentAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Services_Product_VerifyClaimAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountEmailID: String = String()

  var verificationCodeToken: String = String()

  var verificationCode: String = String()

  var onboardSessionToken: String = String()

  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return self._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {self._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Services_Product_VerifyClaimAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountEmailID: String = String()

  var accountVerified: Bool = false

  var verificationMessage: String = String()

  var onboardOrganizationName: String = String()

  var verifiedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _verifiedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_verifiedAt = newValue}
  }
  /// Returns true if `verifiedAt` has been explicitly set.
  var hasVerifiedAt: Bool {return self._verifiedAt != nil}
  /// Clears the value of `verifiedAt`. Subsequent reads from it will return its default value.
  mutating func clearVerifiedAt() {self._verifiedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _verifiedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Services_Product_AuthenticateClaimedAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Elint_Services_Product_AuthenticateClaimedAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Elint_Services_Product_AuthenticateWithMobileNumberRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountMobileNumber: String = String()

  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return self._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {self._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Services_Product_AuthenticateWithMobileNumberResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var verificationCodeToken: String = String()

  var codeSentAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _codeSentAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_codeSentAt = newValue}
  }
  /// Returns true if `codeSentAt` has been explicitly set.
  var hasCodeSentAt: Bool {return self._codeSentAt != nil}
  /// Clears the value of `codeSentAt`. Subsequent reads from it will return its default value.
  mutating func clearCodeSentAt() {self._codeSentAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _codeSentAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.services.product"

extension Elint_Services_Product_ClaimAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimAccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_email_id"),
    2: .standard(proto: "requested_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountEmailID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountEmailID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmailID, fieldNumber: 1)
    }
    if let v = self._requestedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_ClaimAccountRequest, rhs: Elint_Services_Product_ClaimAccountRequest) -> Bool {
    if lhs.accountEmailID != rhs.accountEmailID {return false}
    if lhs._requestedAt != rhs._requestedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_ClaimAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimAccountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_email_id"),
    2: .standard(proto: "account_claimable"),
    3: .standard(proto: "verification_code_token"),
    4: .standard(proto: "onboard_session_token"),
    5: .standard(proto: "code_sent_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountEmailID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.accountClaimable) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.verificationCodeToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.onboardSessionToken) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._codeSentAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountEmailID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmailID, fieldNumber: 1)
    }
    if self.accountClaimable != false {
      try visitor.visitSingularBoolField(value: self.accountClaimable, fieldNumber: 2)
    }
    if !self.verificationCodeToken.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationCodeToken, fieldNumber: 3)
    }
    if !self.onboardSessionToken.isEmpty {
      try visitor.visitSingularStringField(value: self.onboardSessionToken, fieldNumber: 4)
    }
    if let v = self._codeSentAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_ClaimAccountResponse, rhs: Elint_Services_Product_ClaimAccountResponse) -> Bool {
    if lhs.accountEmailID != rhs.accountEmailID {return false}
    if lhs.accountClaimable != rhs.accountClaimable {return false}
    if lhs.verificationCodeToken != rhs.verificationCodeToken {return false}
    if lhs.onboardSessionToken != rhs.onboardSessionToken {return false}
    if lhs._codeSentAt != rhs._codeSentAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_ReRequestCodeClaimingAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReRequestCodeClaimingAccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_email_id"),
    2: .standard(proto: "generated_verification_code_token"),
    3: .standard(proto: "onboard_session_token"),
    4: .standard(proto: "requested_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountEmailID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.generatedVerificationCodeToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.onboardSessionToken) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._requestedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountEmailID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmailID, fieldNumber: 1)
    }
    if !self.generatedVerificationCodeToken.isEmpty {
      try visitor.visitSingularStringField(value: self.generatedVerificationCodeToken, fieldNumber: 2)
    }
    if !self.onboardSessionToken.isEmpty {
      try visitor.visitSingularStringField(value: self.onboardSessionToken, fieldNumber: 3)
    }
    if let v = self._requestedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_ReRequestCodeClaimingAccountRequest, rhs: Elint_Services_Product_ReRequestCodeClaimingAccountRequest) -> Bool {
    if lhs.accountEmailID != rhs.accountEmailID {return false}
    if lhs.generatedVerificationCodeToken != rhs.generatedVerificationCodeToken {return false}
    if lhs.onboardSessionToken != rhs.onboardSessionToken {return false}
    if lhs._requestedAt != rhs._requestedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_ReRequestCodeClaimingAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReRequestCodeClaimingAccountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_email_id"),
    2: .standard(proto: "verification_code_token"),
    3: .standard(proto: "onboard_session_token"),
    4: .standard(proto: "code_sent_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountEmailID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.verificationCodeToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.onboardSessionToken) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._codeSentAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountEmailID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmailID, fieldNumber: 1)
    }
    if !self.verificationCodeToken.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationCodeToken, fieldNumber: 2)
    }
    if !self.onboardSessionToken.isEmpty {
      try visitor.visitSingularStringField(value: self.onboardSessionToken, fieldNumber: 3)
    }
    if let v = self._codeSentAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_ReRequestCodeClaimingAccountResponse, rhs: Elint_Services_Product_ReRequestCodeClaimingAccountResponse) -> Bool {
    if lhs.accountEmailID != rhs.accountEmailID {return false}
    if lhs.verificationCodeToken != rhs.verificationCodeToken {return false}
    if lhs.onboardSessionToken != rhs.onboardSessionToken {return false}
    if lhs._codeSentAt != rhs._codeSentAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_VerifyClaimAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyClaimAccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_email_id"),
    2: .standard(proto: "verification_code_token"),
    3: .standard(proto: "verification_code"),
    4: .standard(proto: "onboard_session_token"),
    5: .standard(proto: "requested_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountEmailID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.verificationCodeToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.verificationCode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.onboardSessionToken) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._requestedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountEmailID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmailID, fieldNumber: 1)
    }
    if !self.verificationCodeToken.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationCodeToken, fieldNumber: 2)
    }
    if !self.verificationCode.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationCode, fieldNumber: 3)
    }
    if !self.onboardSessionToken.isEmpty {
      try visitor.visitSingularStringField(value: self.onboardSessionToken, fieldNumber: 4)
    }
    if let v = self._requestedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_VerifyClaimAccountRequest, rhs: Elint_Services_Product_VerifyClaimAccountRequest) -> Bool {
    if lhs.accountEmailID != rhs.accountEmailID {return false}
    if lhs.verificationCodeToken != rhs.verificationCodeToken {return false}
    if lhs.verificationCode != rhs.verificationCode {return false}
    if lhs.onboardSessionToken != rhs.onboardSessionToken {return false}
    if lhs._requestedAt != rhs._requestedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_VerifyClaimAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyClaimAccountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_email_id"),
    2: .standard(proto: "account_verified"),
    3: .standard(proto: "verification_message"),
    4: .standard(proto: "onboard_organization_name"),
    5: .standard(proto: "verified_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountEmailID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.accountVerified) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.verificationMessage) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.onboardOrganizationName) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._verifiedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountEmailID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmailID, fieldNumber: 1)
    }
    if self.accountVerified != false {
      try visitor.visitSingularBoolField(value: self.accountVerified, fieldNumber: 2)
    }
    if !self.verificationMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationMessage, fieldNumber: 3)
    }
    if !self.onboardOrganizationName.isEmpty {
      try visitor.visitSingularStringField(value: self.onboardOrganizationName, fieldNumber: 4)
    }
    if let v = self._verifiedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_VerifyClaimAccountResponse, rhs: Elint_Services_Product_VerifyClaimAccountResponse) -> Bool {
    if lhs.accountEmailID != rhs.accountEmailID {return false}
    if lhs.accountVerified != rhs.accountVerified {return false}
    if lhs.verificationMessage != rhs.verificationMessage {return false}
    if lhs.onboardOrganizationName != rhs.onboardOrganizationName {return false}
    if lhs._verifiedAt != rhs._verifiedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_AuthenticateClaimedAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthenticateClaimedAccountRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_AuthenticateClaimedAccountRequest, rhs: Elint_Services_Product_AuthenticateClaimedAccountRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_AuthenticateClaimedAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthenticateClaimedAccountResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_AuthenticateClaimedAccountResponse, rhs: Elint_Services_Product_AuthenticateClaimedAccountResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_AuthenticateWithMobileNumberRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthenticateWithMobileNumberRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_mobile_number"),
    2: .standard(proto: "requested_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountMobileNumber) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountMobileNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.accountMobileNumber, fieldNumber: 1)
    }
    if let v = self._requestedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_AuthenticateWithMobileNumberRequest, rhs: Elint_Services_Product_AuthenticateWithMobileNumberRequest) -> Bool {
    if lhs.accountMobileNumber != rhs.accountMobileNumber {return false}
    if lhs._requestedAt != rhs._requestedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_AuthenticateWithMobileNumberResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthenticateWithMobileNumberResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "verification_code_token"),
    2: .standard(proto: "code_sent_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.verificationCodeToken) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._codeSentAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.verificationCodeToken.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationCodeToken, fieldNumber: 1)
    }
    if let v = self._codeSentAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_AuthenticateWithMobileNumberResponse, rhs: Elint_Services_Product_AuthenticateWithMobileNumberResponse) -> Bool {
    if lhs.verificationCodeToken != rhs.verificationCodeToken {return false}
    if lhs._codeSentAt != rhs._codeSentAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
