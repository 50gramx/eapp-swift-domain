// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/services/product/knowledge/space_knowledge_domain_file/create_space_knowledge_domain_file.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Message Definitions
struct Elint_Services_Product_Knowledge_File_CreateSpaceKnowledgeDomainFileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Auth Properties
  var spaceKnowledgeDomainFileServiceAccessAuthDetails: Elint_Services_Product_Knowledge_File_SpaceKnowledgeDomainFileServicesAccessAuthDetails {
    get {return _spaceKnowledgeDomainFileServiceAccessAuthDetails ?? Elint_Services_Product_Knowledge_File_SpaceKnowledgeDomainFileServicesAccessAuthDetails()}
    set {_spaceKnowledgeDomainFileServiceAccessAuthDetails = newValue}
  }
  /// Returns true if `spaceKnowledgeDomainFileServiceAccessAuthDetails` has been explicitly set.
  var hasSpaceKnowledgeDomainFileServiceAccessAuthDetails: Bool {return self._spaceKnowledgeDomainFileServiceAccessAuthDetails != nil}
  /// Clears the value of `spaceKnowledgeDomainFileServiceAccessAuthDetails`. Subsequent reads from it will return its default value.
  mutating func clearSpaceKnowledgeDomainFileServiceAccessAuthDetails() {self._spaceKnowledgeDomainFileServiceAccessAuthDetails = nil}

  /// Create Properties
  var spaceKnowledgeDomainFileName: String = String()

  /// What is the space knowledge domain details for this space_knowledge_domain_file?
  var spaceKnowledgeDomain: Elint_Entity_SpaceKnowledgeDomain {
    get {return _spaceKnowledgeDomain ?? Elint_Entity_SpaceKnowledgeDomain()}
    set {_spaceKnowledgeDomain = newValue}
  }
  /// Returns true if `spaceKnowledgeDomain` has been explicitly set.
  var hasSpaceKnowledgeDomain: Bool {return self._spaceKnowledgeDomain != nil}
  /// Clears the value of `spaceKnowledgeDomain`. Subsequent reads from it will return its default value.
  mutating func clearSpaceKnowledgeDomain() {self._spaceKnowledgeDomain = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spaceKnowledgeDomainFileServiceAccessAuthDetails: Elint_Services_Product_Knowledge_File_SpaceKnowledgeDomainFileServicesAccessAuthDetails? = nil
  fileprivate var _spaceKnowledgeDomain: Elint_Entity_SpaceKnowledgeDomain? = nil
}

struct Elint_Services_Product_Knowledge_File_UploadSpaceKnowledgeDomainFileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Auth Properties
  var spaceKnowledgeDomainFileServiceAccessAuthDetails: Elint_Services_Product_Knowledge_File_SpaceKnowledgeDomainFileServicesAccessAuthDetails {
    get {return _spaceKnowledgeDomainFileServiceAccessAuthDetails ?? Elint_Services_Product_Knowledge_File_SpaceKnowledgeDomainFileServicesAccessAuthDetails()}
    set {_spaceKnowledgeDomainFileServiceAccessAuthDetails = newValue}
  }
  /// Returns true if `spaceKnowledgeDomainFileServiceAccessAuthDetails` has been explicitly set.
  var hasSpaceKnowledgeDomainFileServiceAccessAuthDetails: Bool {return self._spaceKnowledgeDomainFileServiceAccessAuthDetails != nil}
  /// Clears the value of `spaceKnowledgeDomainFileServiceAccessAuthDetails`. Subsequent reads from it will return its default value.
  mutating func clearSpaceKnowledgeDomainFileServiceAccessAuthDetails() {self._spaceKnowledgeDomainFileServiceAccessAuthDetails = nil}

  /// Upload Properties
  var file: Elint_Entity_SpaceKnowledgeDomainFile {
    get {return _file ?? Elint_Entity_SpaceKnowledgeDomainFile()}
    set {_file = newValue}
  }
  /// Returns true if `file` has been explicitly set.
  var hasFile: Bool {return self._file != nil}
  /// Clears the value of `file`. Subsequent reads from it will return its default value.
  mutating func clearFile() {self._file = nil}

  /// What is the file contents in buffer?
  var fileBuffer: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spaceKnowledgeDomainFileServiceAccessAuthDetails: Elint_Services_Product_Knowledge_File_SpaceKnowledgeDomainFileServicesAccessAuthDetails? = nil
  fileprivate var _file: Elint_Entity_SpaceKnowledgeDomainFile? = nil
}

struct Elint_Services_Product_Knowledge_File_UploadSpaceKnowledgeDomainFileResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Upload Properties
  var length: Int32 = 0

  /// What is the file id?
  var fileID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.services.product.knowledge.file"

extension Elint_Services_Product_Knowledge_File_CreateSpaceKnowledgeDomainFileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateSpaceKnowledgeDomainFileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "space_knowledge_domain_file_service_access_auth_details"),
    2: .standard(proto: "space_knowledge_domain_file_name"),
    3: .standard(proto: "space_knowledge_domain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spaceKnowledgeDomainFileServiceAccessAuthDetails) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.spaceKnowledgeDomainFileName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._spaceKnowledgeDomain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._spaceKnowledgeDomainFileServiceAccessAuthDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.spaceKnowledgeDomainFileName.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceKnowledgeDomainFileName, fieldNumber: 2)
    }
    if let v = self._spaceKnowledgeDomain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Knowledge_File_CreateSpaceKnowledgeDomainFileRequest, rhs: Elint_Services_Product_Knowledge_File_CreateSpaceKnowledgeDomainFileRequest) -> Bool {
    if lhs._spaceKnowledgeDomainFileServiceAccessAuthDetails != rhs._spaceKnowledgeDomainFileServiceAccessAuthDetails {return false}
    if lhs.spaceKnowledgeDomainFileName != rhs.spaceKnowledgeDomainFileName {return false}
    if lhs._spaceKnowledgeDomain != rhs._spaceKnowledgeDomain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Knowledge_File_UploadSpaceKnowledgeDomainFileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadSpaceKnowledgeDomainFileRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "space_knowledge_domain_file_service_access_auth_details"),
    2: .same(proto: "file"),
    3: .standard(proto: "file_buffer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spaceKnowledgeDomainFileServiceAccessAuthDetails) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._file) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.fileBuffer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._spaceKnowledgeDomainFileServiceAccessAuthDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._file {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.fileBuffer.isEmpty {
      try visitor.visitSingularBytesField(value: self.fileBuffer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Knowledge_File_UploadSpaceKnowledgeDomainFileRequest, rhs: Elint_Services_Product_Knowledge_File_UploadSpaceKnowledgeDomainFileRequest) -> Bool {
    if lhs._spaceKnowledgeDomainFileServiceAccessAuthDetails != rhs._spaceKnowledgeDomainFileServiceAccessAuthDetails {return false}
    if lhs._file != rhs._file {return false}
    if lhs.fileBuffer != rhs.fileBuffer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Services_Product_Knowledge_File_UploadSpaceKnowledgeDomainFileResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadSpaceKnowledgeDomainFileResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "length"),
    2: .standard(proto: "file_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.length) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fileID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.length != 0 {
      try visitor.visitSingularInt32Field(value: self.length, fieldNumber: 1)
    }
    if !self.fileID.isEmpty {
      try visitor.visitSingularStringField(value: self.fileID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Services_Product_Knowledge_File_UploadSpaceKnowledgeDomainFileResponse, rhs: Elint_Services_Product_Knowledge_File_UploadSpaceKnowledgeDomainFileResponse) -> Bool {
    if lhs.length != rhs.length {return false}
    if lhs.fileID != rhs.fileID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
