//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ethos/elint/services/product/knowledge/space_knowledge/onboard_space_knowledge.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClient`, then call methods of this protocol to make API calls.
internal protocol Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClientInterceptorFactoryProtocol? { get }
}

extension Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClientProtocol {
  internal var serviceName: String {
    return "elint.services.product.knowledge.space.OnboardSpaceKnowledge"
  }
}

internal protocol Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClientInterceptorFactoryProtocol {
}

internal final class Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClient: Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClientInterceptorFactoryProtocol?

  /// Creates a client for the elint.services.product.knowledge.space.OnboardSpaceKnowledge service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Elint_Services_Product_Knowledge_Space_OnboardSpaceKnowledgeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

