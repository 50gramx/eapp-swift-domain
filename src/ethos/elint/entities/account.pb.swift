// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/entities/account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Elint_Entity_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var accountEmailID: String = String()

  var firstName: String = String()

  var lastName: String = String()

  var organizationID: String = String()

  var active: Bool = false

  var adminAcc: Bool = false

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// AccountVerificationCode represents the accountability of delivery of Verification Code
struct Elint_Entity_AccountVerificationCodeDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Was the code sent to the account?
  var accountVerificationCodeSent: Bool = false

  /// When was the last time code sent?
  var sentAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _sentAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_sentAt = newValue}
  }
  /// Returns true if `sentAt` has been explicitly set.
  var hasSentAt: Bool {return self._sentAt != nil}
  /// Clears the value of `sentAt`. Subsequent reads from it will return its default value.
  mutating func clearSentAt() {self._sentAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sentAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.entity"

extension Elint_Entity_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "account_email_id"),
    3: .standard(proto: "first_name"),
    4: .standard(proto: "last_name"),
    5: .standard(proto: "organization_id"),
    6: .same(proto: "active"),
    7: .standard(proto: "admin_acc"),
    8: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accountEmailID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.firstName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.lastName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.adminAcc) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.accountEmailID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmailID, fieldNumber: 2)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 3)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 4)
    }
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 5)
    }
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 6)
    }
    if self.adminAcc != false {
      try visitor.visitSingularBoolField(value: self.adminAcc, fieldNumber: 7)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_Account, rhs: Elint_Entity_Account) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.accountEmailID != rhs.accountEmailID {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.active != rhs.active {return false}
    if lhs.adminAcc != rhs.adminAcc {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_AccountVerificationCodeDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountVerificationCodeDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_verification_code_sent"),
    2: .standard(proto: "sent_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.accountVerificationCodeSent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._sentAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accountVerificationCodeSent != false {
      try visitor.visitSingularBoolField(value: self.accountVerificationCodeSent, fieldNumber: 1)
    }
    if let v = self._sentAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_AccountVerificationCodeDetails, rhs: Elint_Entity_AccountVerificationCodeDetails) -> Bool {
    if lhs.accountVerificationCodeSent != rhs.accountVerificationCodeSent {return false}
    if lhs._sentAt != rhs._sentAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
