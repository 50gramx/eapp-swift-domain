// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/entities/organization.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Elint_Entity_Organization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organizationID: String = String()

  var organizationName: String = String()

  var organizationSpaceID: String = String()

  var adminAccountID: String = String()

  var active: Bool = false

  var billingActive: Bool = false

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// CreateOrganizationRequest represents Onboarding Organisation Request
struct Elint_Entity_ReserveOrganizationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// organization space reservation
  var organizationSpace: String = String()

  /// request created at
  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// CreateOrganizationResponse represents reservation of organisation space *
/// till the admin account verifies the email id and enables the billing 
struct Elint_Entity_ReserveOrganizationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// organization space reservation
  var organizationSpace: String = String()

  /// was the space reservation successful?
  var organizationSpaceReserved: Bool = false

  /// admin account email id
  var accountEmailID: String = String()

  /// admin account verification pending
  var accountEmailIDVerified: Bool = false

  var accountVerificationCode: Elint_Entity_AccountVerificationCodeDetails {
    get {return _accountVerificationCode ?? Elint_Entity_AccountVerificationCodeDetails()}
    set {_accountVerificationCode = newValue}
  }
  /// Returns true if `accountVerificationCode` has been explicitly set.
  var hasAccountVerificationCode: Bool {return self._accountVerificationCode != nil}
  /// Clears the value of `accountVerificationCode`. Subsequent reads from it will return its default value.
  mutating func clearAccountVerificationCode() {self._accountVerificationCode = nil}

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _accountVerificationCode: Elint_Entity_AccountVerificationCodeDetails? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.entity"

extension Elint_Entity_Organization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Organization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_id"),
    2: .standard(proto: "organization_name"),
    3: .standard(proto: "organization_space_id"),
    4: .standard(proto: "admin_account_id"),
    5: .same(proto: "active"),
    6: .standard(proto: "billing_active"),
    7: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.organizationName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.organizationSpaceID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.adminAccountID) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.billingActive) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 1)
    }
    if !self.organizationName.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationName, fieldNumber: 2)
    }
    if !self.organizationSpaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationSpaceID, fieldNumber: 3)
    }
    if !self.adminAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.adminAccountID, fieldNumber: 4)
    }
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 5)
    }
    if self.billingActive != false {
      try visitor.visitSingularBoolField(value: self.billingActive, fieldNumber: 6)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_Organization, rhs: Elint_Entity_Organization) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.organizationName != rhs.organizationName {return false}
    if lhs.organizationSpaceID != rhs.organizationSpaceID {return false}
    if lhs.adminAccountID != rhs.adminAccountID {return false}
    if lhs.active != rhs.active {return false}
    if lhs.billingActive != rhs.billingActive {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_ReserveOrganizationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReserveOrganizationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_space"),
    2: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationSpace) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationSpace.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationSpace, fieldNumber: 1)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_ReserveOrganizationRequest, rhs: Elint_Entity_ReserveOrganizationRequest) -> Bool {
    if lhs.organizationSpace != rhs.organizationSpace {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_ReserveOrganizationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReserveOrganizationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_space"),
    2: .standard(proto: "organization_space_reserved"),
    3: .standard(proto: "account_email_id"),
    4: .standard(proto: "account_email_id_verified"),
    5: .standard(proto: "account_verification_code"),
    6: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationSpace) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.organizationSpaceReserved) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountEmailID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.accountEmailIDVerified) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._accountVerificationCode) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationSpace.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationSpace, fieldNumber: 1)
    }
    if self.organizationSpaceReserved != false {
      try visitor.visitSingularBoolField(value: self.organizationSpaceReserved, fieldNumber: 2)
    }
    if !self.accountEmailID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmailID, fieldNumber: 3)
    }
    if self.accountEmailIDVerified != false {
      try visitor.visitSingularBoolField(value: self.accountEmailIDVerified, fieldNumber: 4)
    }
    if let v = self._accountVerificationCode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_ReserveOrganizationResponse, rhs: Elint_Entity_ReserveOrganizationResponse) -> Bool {
    if lhs.organizationSpace != rhs.organizationSpace {return false}
    if lhs.organizationSpaceReserved != rhs.organizationSpaceReserved {return false}
    if lhs.accountEmailID != rhs.accountEmailID {return false}
    if lhs.accountEmailIDVerified != rhs.accountEmailIDVerified {return false}
    if lhs._accountVerificationCode != rhs._accountVerificationCode {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
