// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/entities/space_knowledge_domain_file.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Elint_Entity_ExtentionType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case png // = 0
  case jpeg // = 1
  case pdf // = 2
  case text // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .png
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .png
    case 1: self = .jpeg
    case 2: self = .pdf
    case 3: self = .text
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .png: return 0
    case .jpeg: return 1
    case .pdf: return 2
    case .text: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Elint_Entity_ExtentionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Elint_Entity_ExtentionType] = [
    .png,
    .jpeg,
    .pdf,
    .text,
  ]
}

#endif  // swift(>=4.2)

struct Elint_Entity_FileTag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fileTagID: Int32 = 0

  var fileTagName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Elint_Entity_SpaceKnowledgeDomainFile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// What is the name of the space_knowledge_domain_file?
  var spaceKnowledgeDomainFileName: String = String()

  /// What is the space_knowledge_domain_file size in bytes?
  var spaceKnowledgeDomainFileSize: Int32 = 0

  /// What is the unique id for the space_knowledge_domain_file?
  var spaceKnowledgeDomainFileID: String = String()

  /// What is the File type?
  var spaceKnowledgeDomainFileExtensionType: Elint_Entity_ExtentionType = .png

  /// What is the space knowledge domain details for this space_knowledge_domain_file?
  var spaceKnowledgeDomain: Elint_Entity_SpaceKnowledgeDomain {
    get {return _spaceKnowledgeDomain ?? Elint_Entity_SpaceKnowledgeDomain()}
    set {_spaceKnowledgeDomain = newValue}
  }
  /// Returns true if `spaceKnowledgeDomain` has been explicitly set.
  var hasSpaceKnowledgeDomain: Bool {return self._spaceKnowledgeDomain != nil}
  /// Clears the value of `spaceKnowledgeDomain`. Subsequent reads from it will return its default value.
  mutating func clearSpaceKnowledgeDomain() {self._spaceKnowledgeDomain = nil}

  /// What are the qualifying tags for the particular file?
  var spaceKnowledgeDomainFileTags: [Elint_Entity_FileTag] = []

  /// When was this file created?
  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  /// When was this file last updated at?
  var lastUpdatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdatedAt = newValue}
  }
  /// Returns true if `lastUpdatedAt` has been explicitly set.
  var hasLastUpdatedAt: Bool {return self._lastUpdatedAt != nil}
  /// Clears the value of `lastUpdatedAt`. Subsequent reads from it will return its default value.
  mutating func clearLastUpdatedAt() {self._lastUpdatedAt = nil}

  /// When was this file accessed at?
  var lastAccessedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastAccessedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastAccessedAt = newValue}
  }
  /// Returns true if `lastAccessedAt` has been explicitly set.
  var hasLastAccessedAt: Bool {return self._lastAccessedAt != nil}
  /// Clears the value of `lastAccessedAt`. Subsequent reads from it will return its default value.
  mutating func clearLastAccessedAt() {self._lastAccessedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spaceKnowledgeDomain: Elint_Entity_SpaceKnowledgeDomain? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastUpdatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastAccessedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.entity"

extension Elint_Entity_ExtentionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PNG"),
    1: .same(proto: "JPEG"),
    2: .same(proto: "PDF"),
    3: .same(proto: "TEXT"),
  ]
}

extension Elint_Entity_FileTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileTag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_tag_id"),
    2: .standard(proto: "file_tag_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fileTagID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fileTagName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fileTagID != 0 {
      try visitor.visitSingularInt32Field(value: self.fileTagID, fieldNumber: 1)
    }
    if !self.fileTagName.isEmpty {
      try visitor.visitSingularStringField(value: self.fileTagName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_FileTag, rhs: Elint_Entity_FileTag) -> Bool {
    if lhs.fileTagID != rhs.fileTagID {return false}
    if lhs.fileTagName != rhs.fileTagName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_SpaceKnowledgeDomainFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpaceKnowledgeDomainFile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "space_knowledge_domain_file_name"),
    2: .standard(proto: "space_knowledge_domain_file_size"),
    3: .standard(proto: "space_knowledge_domain_file_id"),
    4: .standard(proto: "space_knowledge_domain_file_extension_type"),
    5: .standard(proto: "space_knowledge_domain"),
    6: .standard(proto: "space_knowledge_domain_file_tags"),
    7: .standard(proto: "created_at"),
    8: .standard(proto: "last_updated_at"),
    9: .standard(proto: "last_accessed_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.spaceKnowledgeDomainFileName) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.spaceKnowledgeDomainFileSize) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.spaceKnowledgeDomainFileID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.spaceKnowledgeDomainFileExtensionType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._spaceKnowledgeDomain) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.spaceKnowledgeDomainFileTags) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._lastUpdatedAt) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._lastAccessedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spaceKnowledgeDomainFileName.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceKnowledgeDomainFileName, fieldNumber: 1)
    }
    if self.spaceKnowledgeDomainFileSize != 0 {
      try visitor.visitSingularInt32Field(value: self.spaceKnowledgeDomainFileSize, fieldNumber: 2)
    }
    if !self.spaceKnowledgeDomainFileID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceKnowledgeDomainFileID, fieldNumber: 3)
    }
    if self.spaceKnowledgeDomainFileExtensionType != .png {
      try visitor.visitSingularEnumField(value: self.spaceKnowledgeDomainFileExtensionType, fieldNumber: 4)
    }
    if let v = self._spaceKnowledgeDomain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.spaceKnowledgeDomainFileTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spaceKnowledgeDomainFileTags, fieldNumber: 6)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._lastUpdatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._lastAccessedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_SpaceKnowledgeDomainFile, rhs: Elint_Entity_SpaceKnowledgeDomainFile) -> Bool {
    if lhs.spaceKnowledgeDomainFileName != rhs.spaceKnowledgeDomainFileName {return false}
    if lhs.spaceKnowledgeDomainFileSize != rhs.spaceKnowledgeDomainFileSize {return false}
    if lhs.spaceKnowledgeDomainFileID != rhs.spaceKnowledgeDomainFileID {return false}
    if lhs.spaceKnowledgeDomainFileExtensionType != rhs.spaceKnowledgeDomainFileExtensionType {return false}
    if lhs._spaceKnowledgeDomain != rhs._spaceKnowledgeDomain {return false}
    if lhs.spaceKnowledgeDomainFileTags != rhs.spaceKnowledgeDomainFileTags {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._lastUpdatedAt != rhs._lastUpdatedAt {return false}
    if lhs._lastAccessedAt != rhs._lastAccessedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
