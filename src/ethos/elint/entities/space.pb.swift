// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/entities/space.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Elint_Entity_SpaceType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case closed // = 0
  case `open` // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .closed
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .closed
    case 1: self = .open
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .closed: return 0
    case .open: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Elint_Entity_SpaceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Elint_Entity_SpaceType] = [
    .closed,
    .open,
  ]
}

#endif  // swift(>=4.2)

enum Elint_Entity_SpaceIsolationType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case notIsolated // = 0
  case isolated // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .notIsolated
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notIsolated
    case 1: self = .isolated
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .notIsolated: return 0
    case .isolated: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Elint_Entity_SpaceIsolationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Elint_Entity_SpaceIsolationType] = [
    .notIsolated,
    .isolated,
  ]
}

#endif  // swift(>=4.2)

///*
///Everything that is not a part of the space
///constitutes its surroundings. The space and surroundings
///are seperated by a boundary. For example, if the space is one
///logos of a pathos in a container, then the boundary is simply
///the inner wall of the container itself. Everything outside of the
///boundary is considered the surroundings, which would include the
///container itself.
///
///The boundary must be clearly defined, so one can clearly say
///whether a given part of the world is in the space or in the
///surroundings. If information is not able to pass across the boundary,
///then the space is said to be closed; otherwise, it is open. A
///closed space may still exchange energy with the surroundings
///unless the space is an isolated one, in which case neither information
///nor energy can pass across the boundary.
struct Elint_Entity_Space {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var galaxy: Elint_Entity_Galaxy {
    get {return _galaxy ?? Elint_Entity_Galaxy()}
    set {_galaxy = newValue}
  }
  /// Returns true if `galaxy` has been explicitly set.
  var hasGalaxy: Bool {return self._galaxy != nil}
  /// Clears the value of `galaxy`. Subsequent reads from it will return its default value.
  mutating func clearGalaxy() {self._galaxy = nil}

  var spaceID: String = String()

  var spaceType: Elint_Entity_SpaceType = .closed

  var spaceIsolationType: Elint_Entity_SpaceIsolationType = .notIsolated

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _galaxy: Elint_Entity_Galaxy? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.entity"

extension Elint_Entity_SpaceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLOSED"),
    1: .same(proto: "OPEN"),
  ]
}

extension Elint_Entity_SpaceIsolationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_ISOLATED"),
    1: .same(proto: "ISOLATED"),
  ]
}

extension Elint_Entity_Space: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Space"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "galaxy"),
    2: .standard(proto: "space_id"),
    3: .standard(proto: "space_type"),
    4: .standard(proto: "space_isolation_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._galaxy) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.spaceType) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.spaceIsolationType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._galaxy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 2)
    }
    if self.spaceType != .closed {
      try visitor.visitSingularEnumField(value: self.spaceType, fieldNumber: 3)
    }
    if self.spaceIsolationType != .notIsolated {
      try visitor.visitSingularEnumField(value: self.spaceIsolationType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_Space, rhs: Elint_Entity_Space) -> Bool {
    if lhs._galaxy != rhs._galaxy {return false}
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.spaceType != rhs.spaceType {return false}
    if lhs.spaceIsolationType != rhs.spaceIsolationType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
