// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/entities/universe.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Elint_Entity_Universe {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var universeID: String = String()

  var bigBangAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _bigBangAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_bigBangAt = newValue}
  }
  /// Returns true if `bigBangAt` has been explicitly set.
  var hasBigBangAt: Bool {return self._bigBangAt != nil}
  /// Clears the value of `bigBangAt`. Subsequent reads from it will return its default value.
  mutating func clearBigBangAt() {self._bigBangAt = nil}

  var universeName: String = String()

  var universeUniqueName: String = String()

  var universeDescription: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bigBangAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.entity"

extension Elint_Entity_Universe: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Universe"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "universe_id"),
    2: .standard(proto: "big_bang_at"),
    3: .standard(proto: "universe_name"),
    4: .standard(proto: "universe_unique_name"),
    5: .standard(proto: "universe_description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.universeID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._bigBangAt) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.universeName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.universeUniqueName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.universeDescription) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.universeID.isEmpty {
      try visitor.visitSingularStringField(value: self.universeID, fieldNumber: 1)
    }
    if let v = self._bigBangAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.universeName.isEmpty {
      try visitor.visitSingularStringField(value: self.universeName, fieldNumber: 3)
    }
    if !self.universeUniqueName.isEmpty {
      try visitor.visitSingularStringField(value: self.universeUniqueName, fieldNumber: 4)
    }
    if !self.universeDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.universeDescription, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_Universe, rhs: Elint_Entity_Universe) -> Bool {
    if lhs.universeID != rhs.universeID {return false}
    if lhs._bigBangAt != rhs._bigBangAt {return false}
    if lhs.universeName != rhs.universeName {return false}
    if lhs.universeUniqueName != rhs.universeUniqueName {return false}
    if lhs.universeDescription != rhs.universeDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
