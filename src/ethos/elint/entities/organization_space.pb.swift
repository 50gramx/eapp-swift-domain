// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/entities/organization_space.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Elint_Entity_OrganizationSpace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spaceID: String = String()

  var spaceName: String = String()

  var whiteKnowledgeDomainID: String = String()

  var whiteKnowledgeDomainName: String = String()

  var organizationID: String = String()

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// ClaimOrganizationRequest represents new Claim of Organization 
struct Elint_Entity_ClaimOrganizationSpaceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// What is the Organisation being registered for?
  var organizationSpaceName: String = String()

  /// When was it requested?
  var requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestedAt = newValue}
  }
  /// Returns true if `requestedAt` has been explicitly set.
  var hasRequestedAt: Bool {return self._requestedAt != nil}
  /// Clears the value of `requestedAt`. Subsequent reads from it will return its default value.
  mutating func clearRequestedAt() {self._requestedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _requestedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// ClaimOrganizationSpaceResponse represents accountability of Claim 
struct Elint_Entity_ClaimOrganizationSpaceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Is the organization space available?
  var organizationSpaceAvailable: Bool = false

  /// A short feedback message about the claim
  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.entity"

extension Elint_Entity_OrganizationSpace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrganizationSpace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "space_id"),
    2: .standard(proto: "space_name"),
    3: .standard(proto: "white_knowledge_domain_id"),
    4: .standard(proto: "white_knowledge_domain_name"),
    5: .standard(proto: "organization_id"),
    6: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.spaceName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.whiteKnowledgeDomainID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.whiteKnowledgeDomainName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 1)
    }
    if !self.spaceName.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceName, fieldNumber: 2)
    }
    if !self.whiteKnowledgeDomainID.isEmpty {
      try visitor.visitSingularStringField(value: self.whiteKnowledgeDomainID, fieldNumber: 3)
    }
    if !self.whiteKnowledgeDomainName.isEmpty {
      try visitor.visitSingularStringField(value: self.whiteKnowledgeDomainName, fieldNumber: 4)
    }
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 5)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_OrganizationSpace, rhs: Elint_Entity_OrganizationSpace) -> Bool {
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.spaceName != rhs.spaceName {return false}
    if lhs.whiteKnowledgeDomainID != rhs.whiteKnowledgeDomainID {return false}
    if lhs.whiteKnowledgeDomainName != rhs.whiteKnowledgeDomainName {return false}
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_ClaimOrganizationSpaceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimOrganizationSpaceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_space_name"),
    2: .standard(proto: "requested_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationSpaceName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationSpaceName.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationSpaceName, fieldNumber: 1)
    }
    if let v = self._requestedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_ClaimOrganizationSpaceRequest, rhs: Elint_Entity_ClaimOrganizationSpaceRequest) -> Bool {
    if lhs.organizationSpaceName != rhs.organizationSpaceName {return false}
    if lhs._requestedAt != rhs._requestedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_ClaimOrganizationSpaceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimOrganizationSpaceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_space_available"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.organizationSpaceAvailable) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.organizationSpaceAvailable != false {
      try visitor.visitSingularBoolField(value: self.organizationSpaceAvailable, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_ClaimOrganizationSpaceResponse, rhs: Elint_Entity_ClaimOrganizationSpaceResponse) -> Bool {
    if lhs.organizationSpaceAvailable != rhs.organizationSpaceAvailable {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
