// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/entities/generic.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Elint_Entity_PersistentSessionTokenDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionToken: String = String()

  var generatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _generatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_generatedAt = newValue}
  }
  /// Returns true if `generatedAt` has been explicitly set.
  var hasGeneratedAt: Bool {return self._generatedAt != nil}
  /// Clears the value of `generatedAt`. Subsequent reads from it will return its default value.
  mutating func clearGeneratedAt() {self._generatedAt = nil}

  var lastUsedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUsedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUsedAt = newValue}
  }
  /// Returns true if `lastUsedAt` has been explicitly set.
  var hasLastUsedAt: Bool {return self._lastUsedAt != nil}
  /// Clears the value of `lastUsedAt`. Subsequent reads from it will return its default value.
  mutating func clearLastUsedAt() {self._lastUsedAt = nil}

  var validTill: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validTill ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validTill = newValue}
  }
  /// Returns true if `validTill` has been explicitly set.
  var hasValidTill: Bool {return self._validTill != nil}
  /// Clears the value of `validTill`. Subsequent reads from it will return its default value.
  mutating func clearValidTill() {self._validTill = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _generatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastUsedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _validTill: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Entity_TemporarySessionTokenDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionToken: String = String()

  var generatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _generatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_generatedAt = newValue}
  }
  /// Returns true if `generatedAt` has been explicitly set.
  var hasGeneratedAt: Bool {return self._generatedAt != nil}
  /// Clears the value of `generatedAt`. Subsequent reads from it will return its default value.
  mutating func clearGeneratedAt() {self._generatedAt = nil}

  var validTill: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validTill ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validTill = newValue}
  }
  /// Returns true if `validTill` has been explicitly set.
  var hasValidTill: Bool {return self._validTill != nil}
  /// Clears the value of `validTill`. Subsequent reads from it will return its default value.
  mutating func clearValidTill() {self._validTill = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _generatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _validTill: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Entity_PersistentTokenDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String = String()

  var generatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _generatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_generatedAt = newValue}
  }
  /// Returns true if `generatedAt` has been explicitly set.
  var hasGeneratedAt: Bool {return self._generatedAt != nil}
  /// Clears the value of `generatedAt`. Subsequent reads from it will return its default value.
  mutating func clearGeneratedAt() {self._generatedAt = nil}

  var lastUsedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUsedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUsedAt = newValue}
  }
  /// Returns true if `lastUsedAt` has been explicitly set.
  var hasLastUsedAt: Bool {return self._lastUsedAt != nil}
  /// Clears the value of `lastUsedAt`. Subsequent reads from it will return its default value.
  mutating func clearLastUsedAt() {self._lastUsedAt = nil}

  var validTill: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validTill ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validTill = newValue}
  }
  /// Returns true if `validTill` has been explicitly set.
  var hasValidTill: Bool {return self._validTill != nil}
  /// Clears the value of `validTill`. Subsequent reads from it will return its default value.
  mutating func clearValidTill() {self._validTill = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _generatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastUsedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _validTill: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Elint_Entity_TemporaryTokenDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var token: String = String()

  var generatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _generatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_generatedAt = newValue}
  }
  /// Returns true if `generatedAt` has been explicitly set.
  var hasGeneratedAt: Bool {return self._generatedAt != nil}
  /// Clears the value of `generatedAt`. Subsequent reads from it will return its default value.
  mutating func clearGeneratedAt() {self._generatedAt = nil}

  var validTill: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validTill ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validTill = newValue}
  }
  /// Returns true if `validTill` has been explicitly set.
  var hasValidTill: Bool {return self._validTill != nil}
  /// Clears the value of `validTill`. Subsequent reads from it will return its default value.
  mutating func clearValidTill() {self._validTill = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _generatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _validTill: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.entity"

extension Elint_Entity_PersistentSessionTokenDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PersistentSessionTokenDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_token"),
    2: .standard(proto: "generated_at"),
    3: .standard(proto: "last_used_at"),
    4: .standard(proto: "valid_till"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionToken) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._generatedAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lastUsedAt) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._validTill) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionToken.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionToken, fieldNumber: 1)
    }
    if let v = self._generatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lastUsedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._validTill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_PersistentSessionTokenDetails, rhs: Elint_Entity_PersistentSessionTokenDetails) -> Bool {
    if lhs.sessionToken != rhs.sessionToken {return false}
    if lhs._generatedAt != rhs._generatedAt {return false}
    if lhs._lastUsedAt != rhs._lastUsedAt {return false}
    if lhs._validTill != rhs._validTill {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_TemporarySessionTokenDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TemporarySessionTokenDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_token"),
    2: .standard(proto: "generated_at"),
    3: .standard(proto: "valid_till"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionToken) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._generatedAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._validTill) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionToken.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionToken, fieldNumber: 1)
    }
    if let v = self._generatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._validTill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_TemporarySessionTokenDetails, rhs: Elint_Entity_TemporarySessionTokenDetails) -> Bool {
    if lhs.sessionToken != rhs.sessionToken {return false}
    if lhs._generatedAt != rhs._generatedAt {return false}
    if lhs._validTill != rhs._validTill {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_PersistentTokenDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PersistentTokenDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "generated_at"),
    3: .standard(proto: "last_used_at"),
    4: .standard(proto: "valid_till"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._generatedAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lastUsedAt) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._validTill) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if let v = self._generatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lastUsedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._validTill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_PersistentTokenDetails, rhs: Elint_Entity_PersistentTokenDetails) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs._generatedAt != rhs._generatedAt {return false}
    if lhs._lastUsedAt != rhs._lastUsedAt {return false}
    if lhs._validTill != rhs._validTill {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Elint_Entity_TemporaryTokenDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TemporaryTokenDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "generated_at"),
    3: .standard(proto: "valid_till"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._generatedAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._validTill) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if let v = self._generatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._validTill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_TemporaryTokenDetails, rhs: Elint_Entity_TemporaryTokenDetails) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs._generatedAt != rhs._generatedAt {return false}
    if lhs._validTill != rhs._validTill {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
