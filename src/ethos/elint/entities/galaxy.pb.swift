// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethos/elint/entities/galaxy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Elint_Entity_Galaxy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var galaxyID: String = String()

  var galaxyName: String = String()

  var universe: Elint_Entity_Universe {
    get {return _universe ?? Elint_Entity_Universe()}
    set {_universe = newValue}
  }
  /// Returns true if `universe` has been explicitly set.
  var hasUniverse: Bool {return self._universe != nil}
  /// Clears the value of `universe`. Subsequent reads from it will return its default value.
  mutating func clearUniverse() {self._universe = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _universe: Elint_Entity_Universe? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "elint.entity"

extension Elint_Entity_Galaxy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Galaxy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "galaxy_id"),
    2: .standard(proto: "galaxy_name"),
    3: .same(proto: "universe"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.galaxyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.galaxyName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._universe) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.galaxyID.isEmpty {
      try visitor.visitSingularStringField(value: self.galaxyID, fieldNumber: 1)
    }
    if !self.galaxyName.isEmpty {
      try visitor.visitSingularStringField(value: self.galaxyName, fieldNumber: 2)
    }
    if let v = self._universe {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Elint_Entity_Galaxy, rhs: Elint_Entity_Galaxy) -> Bool {
    if lhs.galaxyID != rhs.galaxyID {return false}
    if lhs.galaxyName != rhs.galaxyName {return false}
    if lhs._universe != rhs._universe {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
